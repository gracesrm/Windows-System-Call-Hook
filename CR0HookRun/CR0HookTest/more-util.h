#include "util.h"

typedef NTSTATUS (*NTACCESSCHECK)(PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG ReturnLength, PULONG GrantedAccess, NTSTATUS* AccessStatus);
typedef NTSTATUS (*NTACCESSCHECKANDAUDITALARM)(PUNICODE_STRING SubsystemName OPTIONAL, HANDLE ObjectHandle OPTIONAL, PUNICODE_STRING ObjectTypeName OPTIONAL, PUNICODE_STRING ObjectName OPTIONAL, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PULONG GrantedAccess, PULONG AccessStatus, PBOOLEAN GenerateOnClose);
typedef NTSTATUS (*NTACCESSCHECKBYTYPE)(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus); 
typedef NTSTATUS (*NTACCESSCHECKBYTYPEANDAUDITALARM)(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
typedef NTSTATUS (*NTACCESSCHECKBYTYPERESULTLIST)(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);
typedef NTSTATUS (*NTACCESSCHECKBYTYPERESULTLISTANDAUDITALARM)(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
typedef NTSTATUS (*NTACCESSCHECKBYTYPERESULTLISTANDAUDITALARMBYHANDLE)(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
typedef NTSTATUS (*NTADDATOM)(PWCHAR AtomName, PRTL_ATOM Atom);
typedef NTSTATUS (*NTADDBOOTENTRY)(PBOOT_ENTRY Entry, ULONG Id);
typedef NTSTATUS (*NTADDDRIVERENTRY)(PEFI_DRIVER_ENTRY BootEntry, ULONG Id);
typedef NTSTATUS (*NTADJUSTGROUPSTOKEN)(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength,PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
typedef NTSTATUS (*NTADJUSTPRIVILEGESTOKEN)(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, _When_(PreviousState != NULL, ) PULONG ReturnLength);
typedef NTSTATUS (*NTALLOCATERESERVEOBJECT)(PHANDLE hObject, POBJECT_ATTRIBUTES ObjectAttributes, DWORD ObjectType);
typedef NTSTATUS (*NTALLOCATEUSERPHYSICALPAGES)(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
typedef NTSTATUS (*NTALLOCATEUUIDS)(PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PUCHAR Seed);
typedef NTSTATUS (*NTALPCACCEPTCONNECTPORT)(PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);
typedef NTSTATUS (*NTALPCCANCELMESSAGE)(HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext); 
typedef NTSTATUS (*NTALPCCONNECTPORT)(PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
typedef NTSTATUS (*NTALPCCREATEPORT)(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);
typedef NTSTATUS (*NTALPCCREATEPORTSECTION)(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);
typedef NTSTATUS (*NTALPCCREATERESOURCERESERVE)(HANDLE PortHandle, _Reserved_ ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);
typedef NTSTATUS (*NTALPCCREATESECTIONVIEW)(HANDLE PortHandle, _Reserved_ ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes); 
typedef NTSTATUS (*NTALPCCREATESECURITYCONTEXT)(HANDLE PortHandle, _Reserved_ ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);
typedef NTSTATUS (*NTALPCDELETEPORTSECTION)(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE SectionHandle);
typedef NTSTATUS (*NTALPCDELETERESOURCERESERVE)(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ResourceId);
typedef NTSTATUS (*NTALPCDELETESECTIONVIEW)(HANDLE PortHandle, _Reserved_ ULONG Flags, PVOID ViewBase); 
typedef NTSTATUS (*NTALPCDELETESECURITYCONTEXT)(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ContextHandle); 
typedef NTSTATUS (*NTALPCDISCONNECTPORT)(HANDLE PortHandle, ULONG Flags); 
typedef NTSTATUS (*NTALPCIMPERSONATECLIENTOFPORT)(HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags);
typedef NTSTATUS (*NTALPCOPENSENDERPROCESS)(PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTALPCOPENSENDERTHREAD)(PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTALPCQUERYINFORMATION)(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, _Inout_updates_bytes_to_(Length,*ReturnLength) PVOID PortInformation, ULONG Length, PULONG ReturnLength);
typedef NTSTATUS (*NTALPCQUERYINFORMATIONMESSAGE)(HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);
typedef NTSTATUS (*NTALPCREVOKESECURITYCONTEXT)(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ContextHandle); 
typedef NTSTATUS (*NTALPCSENDWAITRECEIVEPORT)(HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);
typedef NTSTATUS (*NTALPCSETINFORMATION)(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);
typedef NTSTATUS (*NTAPPHELPCACHECONTROL)(APPHELPCACHESERVICECLASS Service, PAPPHELP_CACHE_SERVICE_LOOKUP ServiceData);
typedef NTSTATUS (*NTAREMAPPEDFILESTHESAME)(PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);
typedef NTSTATUS (*NTASSIGNPROCESSTOJOBOBJECT)(HANDLE JobHandle, HANDLE ProcessHandle);
typedef NTSTATUS (*NTCANCELIOFILE)(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
typedef NTSTATUS (*NTCANCELIOFILEEX)(HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock); 
typedef NTSTATUS (*NTCANCELSYNCHRONOUSIOFILE)(HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
typedef NTSTATUS (*NTCANCELTIMER)(HANDLE TimerHandle, PBOOLEAN CurrentState OPTIONAL);
typedef NTSTATUS (*NTCLEAREVENT)(HANDLE EventHandle);
typedef NTSTATUS (*NTCOMMITCOMPLETE)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTCOMMITENLISTMENT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock); 
typedef NTSTATUS (*NTCOMMITTRANSACTION)(HANDLE TransactionHandle, BOOLEAN Wait); 
typedef NTSTATUS (*NTCOMPACTKEYS)(ULONG NrOfKeys, HANDLE KeysArray[]);
typedef NTSTATUS (*NTCOMPARETOKENS)(HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);
typedef NTSTATUS (*NTCOMPRESSKEY)(HANDLE Key);
typedef NTSTATUS (*NTCREATEDEBUGOBJECT)(PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
typedef NTSTATUS (*NTCREATEENLISTMENT)(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
typedef NTSTATUS (*NTCREATEEVENTPAIR)(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
typedef NTSTATUS (*NTCREATEIOCOMPLETION)(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, ULONG NumberOfConcurrentThreads);
typedef NTSTATUS (*NTCREATEJOBOBJECT)(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTCREATEJOBSET)(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
typedef NTSTATUS (*NTCREATEKEYEDEVENT)(PHANDLE OutHandle, ACCESS_MASK AccessMask, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
typedef NTSTATUS (*NTCREATEMAILSLOTFILE)(PHANDLE pHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES attr, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaxMessageSize, PLARGE_INTEGER TimeOut);
typedef NTSTATUS (*NTCREATENAMEDPIPEFILE)(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
typedef NTSTATUS (*NTCREATEPAGINGFILE)(PUNICODE_STRING FileName, PLARGE_INTEGER InitialSize, PLARGE_INTEGER MaximumSize, ULONG Reserved);
typedef NTSTATUS (*NTCREATEPRIVATENAMESPACE)(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
typedef NTSTATUS (*NTCREATEPROFILE)(PHANDLE ProfileHandle, HANDLE Process OPTIONAL, PVOID ImageBase, ULONG ImageSize, ULONG BucketSize, PVOID Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);
typedef NTSTATUS (*NTCREATEPROFILEEX)(PHANDLE ProfileHandle, HANDLE ProcessHandle, PVOID ImageBase, SIZE_T ImageSize, ULONG Granularity, PVOID Buffer, ULONG ProfilingSize, KPROFILE_SOURCE Source, USHORT GroupCount, PGROUP_AFFINITY Affinity);
typedef NTSTATUS (*NTCREATERESOURCEMANAGER)(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
typedef NTSTATUS (*NTCREATESEMAPHORE)(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, LONG InitialCount, LONG MaximumCount);
typedef NTSTATUS (*NTCREATESYMBOLICLINKOBJECT)(PHANDLE SymbolicLinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES attr, PUNICODE_STRING TargetName);
typedef NTSTATUS (*NTCREATETIMER)(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, TIMER_TYPE TimerType);
typedef NTSTATUS (*NTCREATETOKEN)(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER TokenUser, PTOKEN_GROUPS TokenGroups, PTOKEN_PRIVILEGES TokenPrivileges, PTOKEN_OWNER TokenOwner, PTOKEN_PRIMARY_GROUP TokenPrimaryGroup, PTOKEN_DEFAULT_DACL TokenDefaultDacl, PTOKEN_SOURCE TokenSource);
typedef NTSTATUS (*NTCREATETRANSACTION)(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description); 
typedef NTSTATUS (*NTCREATETRANSACTIONMANAGER)(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength); 
typedef NTSTATUS (*NTCREATEWAITABLEPORT)(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage); 
typedef NTSTATUS (*NTCREATEWORKERFACTORY)(PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);
typedef NTSTATUS (*NTDEBUGCONTINUE)(HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS nt);
typedef NTSTATUS (*NTDELETEATOM)(RTL_ATOM Atom);
typedef NTSTATUS (*NTDELETEBOOTENTRY)(ULONG Id);
typedef NTSTATUS (*NTDELETEDRIVERENTRY)(ULONG Id);
typedef NTSTATUS (*NTDELETEOBJECTAUDITALARM)(PUNICODE_STRING SubsystemName, HANDLE ObjectHandle OPTIONAL, BOOLEAN GenerateOnClose);
typedef NTSTATUS (*NTDELETEPRIVATENAMESPACE)(HANDLE NamespaceHandle);
typedef NTSTATUS (*NTDISABLELASTKNOWNGOOD)(VOID);
typedef NTSTATUS (*NTDISPLAYSTRING)(PUNICODE_STRING String);
typedef NTSTATUS (*NTDRAWTEXT)(PUNICODE_STRING Text);
typedef NTSTATUS (*NTENABLELASTKNOWNGOOD)(VOID);
typedef NTSTATUS (*NTENUMERATEBOOTENTRIES)(PVOID Buffer, PULONG BufferLength);
typedef NTSTATUS (*NTENUMERATEDRIVERENTRIES)(PVOID Buffer, PULONG BufferLength);
typedef NTSTATUS (*NTENUMERATESYSTEMENVIRONMENTVALUESEX)(ULONG InformationClass, PVOID Buffer, PULONG BufferLength);
typedef NTSTATUS (*NTENUMERATETRANSACTIONOBJECT)(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
typedef NTSTATUS (*NTEXTENDSECTION)(HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);
typedef NTSTATUS (*NTFILTERTOKEN)(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
typedef NTSTATUS (*NTFINDATOM)(PWCHAR AtomName, PRTL_ATOM Atom OPTIONAL);
typedef NTSTATUS (*NTFLUSHWRITEBUFFER)(VOID);
typedef NTSTATUS (*NTFREEUSERPHYSICALPAGES)(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
typedef NTSTATUS (*NTFREEZEREGISTRY)(ULONG TimeOutInSeconds);
typedef NTSTATUS (*NTFREEZETRANSACTIONS)(PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);
typedef ULONG (*NTGETCURRENTPROCESSORNUMBER)(void);
typedef NTSTATUS (*NTGETDEVICEPOWERSTATE)(HANDLE Device, PDEVICE_POWER_STATE State);
typedef NTSTATUS (*NTGETNEXTPROCESS)(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);
typedef NTSTATUS (*NTGETNEXTTHREAD)(HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);
typedef NTSTATUS (*NTGETNLSSECTIONPTR)(ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);
typedef NTSTATUS (*NTGETNOTIFICATIONRESOURCEMANAGER)(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
typedef NTSTATUS (*NTGETPLUGPLAYEVENT)(ULONG Reserved1, ULONG Reserved2, PPLUGPLAY_EVENT_BLOCK Buffer, ULONG BufferSize);
typedef NTSTATUS (*NTGETWRITEWATCH)(HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);
typedef NTSTATUS (*NTIMPERSONATEANONYMOUSTOKEN)(HANDLE ThreadHandle);
typedef NTSTATUS (*NTINITIALIZENLSFILES)(PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);
typedef NTSTATUS (*NTINITIALIZEREGISTRY)(USHORT Flag);
typedef NTSTATUS (*NTINITIATEPOWERACTION)(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous);
typedef NTSTATUS (*NTISPROCESSINJOB)(HANDLE ProcessHandle, HANDLE JobHandle OPTIONAL);
typedef BOOLEAN (*NTISSYSTEMRESUMEAUTOMATIC)(VOID);
typedef NTSTATUS (*NTLOADKEY)(POBJECT_ATTRIBUTES DestinationKeyName, POBJECT_ATTRIBUTES HiveFileName);
typedef NTSTATUS (*NTLOADKEY2)(POBJECT_ATTRIBUTES KeyObjectAttributes, POBJECT_ATTRIBUTES FileObjectAttributes, ULONG Flags);
typedef NTSTATUS (*NTLOADKEYEX)(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey);
typedef NTSTATUS (*NTLOCKPRODUCTACTIVATIONKEYS)(PULONG pPrivateVer, PULONG pSafeMode);
typedef NTSTATUS (*NTLOCKREGISTRYKEY)(HANDLE KeyHandle);
typedef NTSTATUS (*NTMAKEPERMANENTOBJECT)(HANDLE ObjectHandle);
typedef NTSTATUS (*NTMAKETEMPORARYOBJECT)(HANDLE Handle);
typedef NTSTATUS (*NTMAPUSERPHYSICALPAGES)(PVOID VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
typedef NTSTATUS (*NTMAPUSERPHYSICALPAGESSCATTER)(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
typedef NTSTATUS (*NTMODIFYBOOTENTRY)(PBOOT_ENTRY BootEntry);
typedef NTSTATUS (*NTMODIFYDRIVERENTRY)(PEFI_DRIVER_ENTRY DriverEntry);
typedef NTSTATUS (*NTNOTIFYCHANGEDIRECTORYFILE)(HANDLE FileHandle, HANDLE EventHandle OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG BufferSize, ULONG CompletionFilter, BOOLEAN WatchTree);
typedef NTSTATUS (*NTNOTIFYCHANGESESSION)(HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, (PayloadSize) PVOID Payload, ULONG PayloadSize);
typedef NTSTATUS (*NTOPENENLISTMENT)(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE RmHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENEVENTPAIR)(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENIOCOMPLETION)(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENJOBOBJECT)(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENKEYEDEVENT)(PHANDLE OutHandle, ACCESS_MASK AccessMask, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENOBJECTAUDITALARM)(PUNICODE_STRING SubsystemName OPTIONAL, PHANDLE ObjectHandle OPTIONAL, PUNICODE_STRING ObjectTypeName OPTIONAL, PUNICODE_STRING ObjectName OPTIONAL, PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges OPTIONAL, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose OPTIONAL);
typedef NTSTATUS (*NTOPENPRIVATENAMESPACE)(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
typedef NTSTATUS (*NTOPENPROCESSTOKEN)(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle); 
typedef NTSTATUS (*NTOPENRESOURCEMANAGER)(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes); 
typedef NTSTATUS (*NTOPENSEMAPHORE)(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENSESSION)(PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes); 
typedef NTSTATUS (*NTOPENTHREADTOKEN)(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
typedef NTSTATUS (*NTOPENTIMER)(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
typedef NTSTATUS (*NTOPENTRANSACTION)(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
typedef NTSTATUS (*NTOPENTRANSACTIONMANAGER)(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
typedef NTSTATUS (*NTPLUGPLAYCONTROL)(PLUGPLAY_CONTROL_CLASS PlugPlayControlClass, PVOID Buffer, ULONG BufferLength);
typedef NTSTATUS (*NTPREPREPARECOMPLETE)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTPREPREPAREENLISTMENT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTPREPARECOMPLETE)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTPREPAREENLISTMENT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTPRIVILEGECHECK)(HANDLE TokenHandle, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
typedef NTSTATUS (*NTPRIVILEGEOBJECTAUDITALARM)(PUNICODE_STRING SubsystemName OPTIONAL, HANDLE ObjectHandle OPTIONAL, HANDLE ClientToken, ULONG DesiredAccess, PPRIVILEGE_SET ClientPrivileges, BOOLEAN AccessGranted);
typedef NTSTATUS (*NTPRIVILEGEDSERVICEAUDITALARM)(PUNICODE_STRING SubsystemName OPTIONAL, PUNICODE_STRING ServiceName OPTIONAL, HANDLE ClientToken, PPRIVILEGE_SET ClientPrivileges, BOOLEAN AccessGranted);
typedef NTSTATUS (*NTPROPAGATIONCOMPLETE)(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
typedef NTSTATUS (*NTPROPAGATIONFAILED)(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
typedef NTSTATUS (*NTPULSEEVENT)(HANDLE EventHandle, PLONG PreviousState OPTIONAL);
typedef NTSTATUS (*NTQUERYBOOTENTRYORDER)(PULONG Ids, PULONG Count);
typedef NTSTATUS (*NTQUERYBOOTOPTIONS)(PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);
typedef NTSTATUS (*NTQUERYDEBUGFILTERSTATE)(ULONG ComponentId, ULONG Level);
typedef NTSTATUS (*NTQUERYDEFAULTLOCALE)(BOOLEAN UserProfile, PLCID DefaultLocaleId);
typedef NTSTATUS (*NTQUERYDEFAULTUILANGUAGE)(LANGID* LanguageId);
typedef NTSTATUS (*NTQUERYDIRECTORYOBJECT)(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYDIRECTORYOBJECT)(HANDLE handle, PDIRECTORY_BASIC_INFORMATION buffer, ULONG size, BOOLEAN single_entry, BOOLEAN restart, PULONG context, PULONG ret_size);
typedef NTSTATUS (*NTQUERYDRIVERENTRYORDER)(PULONG Ids, PULONG Count);
typedef NTSTATUS (*NTQUERYINFORMATIONFILE)(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
typedef NTSTATUS (*NTQUERYINFORMATIONENLISTMENT)(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINFORMATIONJOBOBJECT)(HANDLE JobHandle, JOBOBJECTINFOCLASS JobInformationClass, PVOID JobInformation, ULONG JobInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINFORMATIONRESOURCEMANAGER)(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINFORMATIONTRANSACTION)(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINFORMATIONTRANSACTIONMANAGER)(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINFORMATIONWORKERFACTORY)(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, (WorkerFactoryInformationLength) PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYINSTALLUILANGUAGE)(LANGID* LanguageId);
typedef NTSTATUS (*NTQUERYINTERVALPROFILE)(KPROFILE_SOURCE ProfileSource, PULONG Interval);
typedef NTSTATUS (*NTQUERYIOCOMPLETION)(HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS InformationClass, PVOID IoCompletionInformation, ULONG InformationBufferLength, PULONG RequiredLength OPTIONAL);
typedef NTSTATUS (*NTQUERYOPENSUBKEYS)(POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);
typedef NTSTATUS (*NTQUERYOPENSUBKEYSEX)(POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, (BufferLength) PVOID Buffer, PULONG RequiredSize);
typedef NTSTATUS (*NTQUERYINFORMATIONPROCESS)(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYSECTION)(HANDLE SectionHandle, SECTION_INFORMATION_CLASS InformationClass, PVOID InformationBuffer, ULONG InformationBufferSize, PULONG ResultLength OPTIONAL);
typedef NTSTATUS (*NTQUERYSECURITYATTRIBUTESTOKEN)(HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, (Length) PVOID Buffer, ULONG Length, PULONG ReturnLength); 
typedef NTSTATUS (*NTQUERYSEMAPHORE)(HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength OPTIONAL);
typedef NTSTATUS (*NTQUERYSYSTEMENVIRONMENTVALUE)(PUNICODE_STRING VariableName, PWCHAR Value, ULONG ValueBufferLength, PULONG RequiredLength);
typedef NTSTATUS (*NTQUERYSYSTEMENVIRONMENTVALUEEX)(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ReturnLength, PULONG Attributes);
typedef NTSTATUS (*NTQUERYSYSTEMINFORMATIONEX)(SYSTEM_INFORMATION_CLASS SystemInformationClass, (InputBufferLength) PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTQUERYTIMER)(HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG Length, PULONG ReturnLength);
typedef NTSTATUS (*NTRAISEEXCEPTION)(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT Context, BOOLEAN FirstChance);
typedef NTSTATUS (*NTRAISEHARDERROR)(NTSTATUS ErrorStatus, ULONG NumberOfParameters, PUNICODE_STRING UnicodeStringParameterMask OPTIONAL, PVOID *Parameters, HARDERROR_RESPONSE_OPTION ResponseOption, PHARDERROR_RESPONSE Response);
typedef NTSTATUS (*NTREADFILESCATTER)(HANDLE FileHandle, HANDLE Event OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, FILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key OPTIONAL);
typedef NTSTATUS (*NTREADONLYENLISTMENT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTRECOVERENLISTMENT)(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
typedef NTSTATUS (*NTRECOVERRESOURCEMANAGER)(HANDLE ResourceManagerHandle);
typedef NTSTATUS (*NTRECOVERTRANSACTIONMANAGER)(HANDLE TransactionManagerHandle);
typedef NTSTATUS (*NTREGISTERPROTOCOLADDRESSINFORMATION)(HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
typedef NTSTATUS (*NTRELEASEKEYEDEVENT)(HANDLE Handle, PVOID Key, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
typedef NTSTATUS (*NTRELEASESEMAPHORE)(HANDLE SemaphoreHandle, ULONG ReleaseCount, PULONG PreviousCount OPTIONAL);
typedef NTSTATUS (*NTREMOVEIOCOMPLETION)(HANDLE IoCompletionHandle, PULONG CompletionKey, PULONG CompletionValue, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);
typedef NTSTATUS (*NTREMOVEPROCESSDEBUG)(HANDLE ProcessHandle, HANDLE DebugObjectHandle); 
typedef NTSTATUS (*NTRENAMETRANSACTIONMANAGER)(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
typedef NTSTATUS (*NTREPLACEKEY)(POBJECT_ATTRIBUTES NewHiveFileName, HANDLE KeyHandle, POBJECT_ATTRIBUTES BackupHiveFileName);
typedef NTSTATUS (*NTREPLACEPARTITIONUNIT)(PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);
typedef NTSTATUS (*NTREPLYWAITRECEIVEPORTEX)(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);
typedef NTSTATUS (*NTRESETEVENT)(HANDLE EventHandle, PLONG PreviousState OPTIONAL);
typedef NTSTATUS (*NTRESETWRITEWATCH)(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);
typedef NTSTATUS (*NTRESTOREKEY)(HANDLE KeyHandle, HANDLE FileHandle, ULONG RestoreOption);
typedef NTSTATUS (*NTRESUMEPROCESS)(HANDLE ProcessHandle);
typedef NTSTATUS (*NTROLLBACKCOMPLETE)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTROLLBACKENLISTMENT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTROLLBACKTRANSACTION)(HANDLE TransactionHandle, BOOLEAN Wait);
typedef NTSTATUS (*NTROLLFORWARDTRANSACTIONMANAGER)(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTSAVEKEY)(HANDLE KeyHandle, HANDLE FileHandle);
typedef NTSTATUS (*NTSAVEKEYEX)(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags); 
typedef NTSTATUS (*NTSAVEMERGEDKEYS)(HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);
typedef NTSTATUS (*NTSECURECONNECTPORT)(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, opt_ PULONG MaxMessageLength, _Inout_updates_bytes_to_opt_ *,*ConnectionInformationLength PVOID ConnectionInformation, PULONG ConnectionInformationLength);
typedef NTSTATUS (*NTSERIALIZEBOOT)(VOID);
typedef NTSTATUS (*NTSETBOOTENTRYORDER)(PULONG Ids, PULONG Count);
typedef NTSTATUS (*NTSETBOOTOPTIONS)(PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);
typedef NTSTATUS (*NTSETDEBUGFILTERSTATE)(ULONG ComponentId, ULONG Level, BOOLEAN State);
typedef NTSTATUS (*NTSETDEFAULTHARDERRORPORT)(HANDLE PortHandle);
typedef NTSTATUS (*NTSETDEFAULTLOCALE)(BOOLEAN UserProfile, LCID DefaultLocaleId);
typedef NTSTATUS (*NTSETDEFAULTUILANGUAGE)(LANGID LanguageId);
typedef NTSTATUS (*NTSETDRIVERENTRYORDER)(PULONG Ids, PULONG Count);
typedef NTSTATUS (*NTSETEVENTBOOSTPRIORITY)(HANDLE EventHandle);
typedef NTSTATUS (*NTSETHIGHEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTSETHIGHWAITLOWEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTSETINFORMATIONDEBUGOBJECT)(HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);
typedef NTSTATUS (*NTSETINFORMATIONENLISTMENT)(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
typedef NTSTATUS (*NTSETINFORMATIONJOBOBJECT)(HANDLE JobHandle, JOBOBJECTINFOCLASS JobInformationClass, PVOID JobInformation, ULONG JobInformationLength);
typedef NTSTATUS (*NTSETINFORMATIONOBJECT)(HANDLE ObjectHandle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG Length);
typedef NTSTATUS (*NTSETINFORMATIONRESOURCEMANAGER)(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, (ResourceManagerInformationLength) PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
typedef NTSTATUS (*NTSETINFORMATIONTRANSACTION)(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
typedef NTSTATUS (*NTSETINFORMATIONTRANSACTIONMANAGER)(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, (TransactionManagerInformationLength) PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength); 
typedef NTSTATUS (*NTSETINFORMATIONWORKERFACTORY)(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, (WorkerFactoryInformationLength) PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);
typedef NTSTATUS (*NTSETINTERVALPROFILE)(ULONG Interval, KPROFILE_SOURCE Source);
typedef NTSTATUS (*NTSETIOCOMPLETION)(HANDLE IoCompletionHandle, ULONG CompletionKey, PIO_STATUS_BLOCK IoStatusBlock, NTSTATUS CompletionStatus, ULONG NumberOfBytesTransfered);
typedef NTSTATUS (*NTSETLDTENTRIES)(ULONG Selector1, LDT_ENTRY LdtEntry1, ULONG Selector2, LDT_ENTRY LdtEntry2);
typedef NTSTATUS (*NTSETLOWEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTSETLOWWAITHIGHEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTSETSYSTEMENVIRONMENTVALUE)(PUNICODE_STRING VariableName, PUNICODE_STRING Value);
typedef NTSTATUS (*NTSETSYSTEMENVIRONMENTVALUEEX)(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ReturnLength, PULONG Attributes);
typedef NTSTATUS (*NTSETSYSTEMINFORMATION)(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);
typedef NTSTATUS (*NTSETSYSTEMPOWERSTATE)(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags);
typedef NTSTATUS (*NTSETTHREADEXECUTIONSTATE)(EXECUTION_STATE NewFlags, EXECUTION_STATE * PreviousFlags);
typedef NTSTATUS (*NTSETTIMER)(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine OPTIONAL, PVOID TimerContext OPTIONAL, BOOLEAN ResumeTimer, LONG Period OPTIONAL, PBOOLEAN PreviousState OPTIONAL);
typedef NTSTATUS (*NTSETUUIDSEED)(PUCHAR Seed);
typedef NTSTATUS (*NTSHUTDOWNSYSTEM)(SHUTDOWN_ACTION Action);
typedef NTSTATUS (*NTSHUTDOWNWORKERFACTORY)(HANDLE WorkerFactoryHandle, volatile LONG *PendingWorkerCount);
typedef NTSTATUS (*NTSIGNALANDWAITFORSINGLEOBJECT)(HANDLE ObjectToSignal, HANDLE WaitableObject, BOOLEAN Alertable, PLARGE_INTEGER Time OPTIONAL);
typedef NTSTATUS (*NTSINGLEPHASEREJECT)(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
typedef NTSTATUS (*NTSTARTPROFILE)(HANDLE ProfileHandle);
typedef NTSTATUS (*NTSTOPPROFILE)(HANDLE ProfileHandle);
typedef NTSTATUS (*NTSUSPENDPROCESS)(HANDLE ProcessHandle);
typedef NTSTATUS (*NTTERMINATEJOBOBJECT)(HANDLE JobHandle, NTSTATUS ExitStatus);
typedef NTSTATUS (*NTTESTALERT)(VOID);
typedef NTSTATUS (*NTTHAWREGISTRY)(VOID);
typedef NTSTATUS (*NTTHAWTRANSACTIONS)(VOID);
typedef NTSTATUS (*NTTRACECONTROL)(ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);
typedef NTSTATUS (*NTTRACEEVENT)(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
typedef NTSTATUS (*NTTRANSLATEFILEPATH)(PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, ULONG OutputFilePathLength);
typedef NTSTATUS (*NTUMSTHREADYIELD)(PVOID SchedulerParam);
typedef NTSTATUS (*NTUNLOADKEY)(POBJECT_ATTRIBUTES DestinationKeyName);
typedef NTSTATUS (*NTUNLOADKEY2)(POBJECT_ATTRIBUTES TargetKey, ULONG Flags);
typedef NTSTATUS (*NTUNLOADKEYEX)(POBJECT_ATTRIBUTES TargetKey, HANDLE Event);
typedef NTSTATUS (*NTVDMCONTROL)(VDMSERVICECLASS Service, PVOID ServiceData);
typedef NTSTATUS (*NTWAITFORDEBUGEVENT)(HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PVOID WaitStateChange);
typedef NTSTATUS (*NTWAITFORKEYEDEVENT)(HANDLE KeyedEvent, const void* NextEvent, BOOLEAN Recursive, const LARGE_INTEGER* TimeOut);
typedef NTSTATUS (*NTWAITFORMULTIPLEOBJECTS)(ULONG ObjectCount, PHANDLE HandleArray, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER TimeOut OPTIONAL);
typedef NTSTATUS (*NTWAITFORMULTIPLEOBJECTS32)(ULONG ObjectCount, PLONG Handles, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER TimeOut OPTIONAL);
typedef NTSTATUS (*NTSETLOWWAITHIGHEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTWAITLOWEVENTPAIR)(HANDLE EventPairHandle);
typedef NTSTATUS (*NTWORKERFACTORYWORKERREADY)(HANDLE WorkerFactoryHandle);
typedef NTSTATUS (*NTWRITEFILEGATHER)(HANDLE FileHandle, HANDLE Event OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, FILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key OPTIONAL);
typedef NTSTATUS (*NTYIELDEXECUTION)(VOID);

NTACCESSCHECK oldNtAccessCheck;
NTACCESSCHECKANDAUDITALARM oldNtAccessCheckAndAuditAlarm;
NTACCESSCHECKBYTYPE oldNtAccessCheckByType;
NTACCESSCHECKBYTYPEANDAUDITALARM oldNtAccessCheckByTypeAndAuditAlarm;
NTACCESSCHECKBYTYPERESULTLIST oldNtAccessCheckByTypeResultList;
NTACCESSCHECKBYTYPERESULTLISTANDAUDITALARM oldNtAccessCheckByTypeResultListAndAuditAlarm;
NTACCESSCHECKBYTYPERESULTLISTANDAUDITALARMBYHANDLE oldNtAccessCheckByTypeResultListAndAuditAlarmByHandle;
NTADDATOM oldNtAddAtom;
NTADDBOOTENTRY oldNtAddBootEntry;
NTADDDRIVERENTRY oldNtAddDriverEntry;
NTADJUSTGROUPSTOKEN oldNtAdjustGroupsToken;
NTADJUSTPRIVILEGESTOKEN oldNtAdjustPrivilegesToken;
NTALLOCATERESERVEOBJECT oldNtAllocateReserveObject;
NTALLOCATEUSERPHYSICALPAGES oldNtAllocateUserPhysicalPages;
NTALLOCATEUUIDS oldNtAllocateUuids;
NTALPCACCEPTCONNECTPORT oldNtAlpcAcceptConnectPort;
NTALPCCANCELMESSAGE oldNtAlpcCancelMessage;
NTALPCCONNECTPORT oldNtAlpcConnectPort;
NTALPCCREATEPORT oldNtAlpcCreatePort;
NTALPCCREATEPORTSECTION oldNtAlpcCreatePortSection;
NTALPCCREATERESOURCERESERVE oldNtAlpcCreateResourceReserve;
NTALPCCREATESECTIONVIEW oldNtAlpcCreateSectionView;
NTALPCCREATESECURITYCONTEXT oldNtAlpcCreateSecurityContext;
NTALPCDELETEPORTSECTION oldNtAlpcDeletePortSection;
NTALPCDELETERESOURCERESERVE oldNtAlpcDeleteResourceReserve;
NTALPCDELETESECTIONVIEW oldNtAlpcDeleteSectionView;
NTALPCDELETESECURITYCONTEXT oldNtAlpcDeleteSecurityContext;
NTALPCDISCONNECTPORT oldNtAlpcDisconnectPort;
NTALPCIMPERSONATECLIENTOFPORT oldNtAlpcImpersonateClientOfPort;
NTALPCOPENSENDERPROCESS oldNtAlpcOpenSenderProcess;
NTALPCOPENSENDERTHREAD oldNtAlpcOpenSenderThread;
NTALPCQUERYINFORMATION oldNtAlpcQueryInformation;
NTALPCQUERYINFORMATIONMESSAGE oldNtAlpcQueryInformationMessage;
NTALPCREVOKESECURITYCONTEXT oldNtAlpcRevokeSecurityContext;
NTALPCSENDWAITRECEIVEPORT oldNtAlpcSendWaitReceivePort;
NTALPCSETINFORMATION oldNtAlpcSetInformation;
NTAPPHELPCACHECONTROL oldNtApphelpCacheControl;
NTAREMAPPEDFILESTHESAME oldNtAreMappedFilesTheSame;
NTASSIGNPROCESSTOJOBOBJECT oldNtAssignProcessToJobObject;
NTCANCELIOFILE oldNtCancelIoFile;
NTCANCELIOFILEEX oldNtCancelIoFileEx;
NTCANCELSYNCHRONOUSIOFILE oldNtCancelSynchronousIoFile;
NTCANCELTIMER oldNtCancelTimer;
NTCLEAREVENT oldNtClearEvent;
NTCOMMITCOMPLETE oldNtCommitComplete;
NTCOMMITENLISTMENT oldNtCommitEnlistment;
NTCOMMITTRANSACTION oldNtCommitTransaction;
NTCOMPACTKEYS oldNtCompactKeys;
NTCOMPARETOKENS oldNtCompareTokens;
NTCOMPRESSKEY oldNtCompressKey;
NTCREATEDEBUGOBJECT oldNtCreateDebugObject;
NTCREATEENLISTMENT oldNtCreateEnlistment;
NTCREATEEVENTPAIR oldNtCreateEventPair;
NTCREATEIOCOMPLETION oldNtCreateIoCompletion;
NTCREATEJOBOBJECT oldNtCreateJobObject;
NTCREATEJOBSET oldNtCreateJobSet;
NTCREATEKEYEDEVENT oldNtCreateKeyedEvent;
NTCREATEMAILSLOTFILE oldNtCreateMailslotFile;
NTCREATENAMEDPIPEFILE oldNtCreateNamedPipeFile;
NTCREATEPAGINGFILE oldNtCreatePagingFile;
NTCREATEPRIVATENAMESPACE oldNtCreatePrivateNamespace;
NTCREATEPROFILE oldNtCreateProfile;
NTCREATEPROFILEEX oldNtCreateProfileEx;
NTCREATERESOURCEMANAGER oldNtCreateResourceManager;
NTCREATESEMAPHORE oldNtCreateSemaphore;
NTCREATESYMBOLICLINKOBJECT oldNtCreateSymbolicLinkObject;
NTCREATETIMER oldNtCreateTimer;
NTCREATETOKEN oldNtCreateToken;
NTCREATETRANSACTION oldNtCreateTransaction;
NTCREATETRANSACTIONMANAGER oldNtCreateTransactionManager;
NTCREATEWAITABLEPORT oldNtCreateWaitablePort;
NTCREATEWORKERFACTORY oldNtCreateWorkerFactory;
NTDEBUGCONTINUE oldNtDebugContinue;
NTDELETEATOM oldNtDeleteAtom;
NTDELETEBOOTENTRY oldNtDeleteBootEntry;
NTDELETEDRIVERENTRY oldNtDeleteDriverEntry;
NTDELETEOBJECTAUDITALARM oldNtDeleteObjectAuditAlarm;
NTDELETEPRIVATENAMESPACE oldNtDeletePrivateNamespace;
NTDISABLELASTKNOWNGOOD oldNtDisableLastKnownGood;
NTDISPLAYSTRING oldNtDisplayString;
NTDRAWTEXT oldNtDrawText;
NTENABLELASTKNOWNGOOD oldNtEnableLastKnownGood;
NTENUMERATEBOOTENTRIES oldNtEnumerateBootEntries;
NTENUMERATEDRIVERENTRIES oldNtEnumerateDriverEntries;
NTENUMERATESYSTEMENVIRONMENTVALUESEX oldNtEnumerateSystemEnvironmentValuesEx;
NTENUMERATETRANSACTIONOBJECT oldNtEnumerateTransactionObject;
NTEXTENDSECTION oldNtExtendSection;
NTFILTERTOKEN oldNtFilterToken;
NTFINDATOM oldNtFindAtom;
NTFLUSHWRITEBUFFER oldNtFlushWriteBuffer;
NTFREEUSERPHYSICALPAGES oldNtFreeUserPhysicalPages;
NTFREEZEREGISTRY oldNtFreezeRegistry;
NTFREEZETRANSACTIONS oldNtFreezeTransactions;
NTGETCURRENTPROCESSORNUMBER oldNtGetCurrentProcessorNumber;
NTGETDEVICEPOWERSTATE oldNtGetDevicePowerState;
NTGETNEXTPROCESS oldNtGetNextProcess;
NTGETNEXTTHREAD oldNtGetNextThread;
NTGETNLSSECTIONPTR oldNtGetNlsSectionPtr;
NTGETNOTIFICATIONRESOURCEMANAGER oldNtGetNotificationResourceManager;
NTGETPLUGPLAYEVENT oldNtGetPlugPlayEvent;
NTGETWRITEWATCH oldNtGetWriteWatch;
NTIMPERSONATEANONYMOUSTOKEN oldNtImpersonateAnonymousToken;
NTINITIALIZENLSFILES oldNtInitializeNlsFiles;
NTINITIALIZEREGISTRY oldNtInitializeRegistry;
NTINITIATEPOWERACTION oldNtInitiatePowerAction;
NTISPROCESSINJOB oldNtIsProcessInJob;
NTISSYSTEMRESUMEAUTOMATIC oldNtIsSystemResumeAutomatic;
NTLOADKEY oldNtLoadKey;
NTLOADKEY2 oldNtLoadKey2;
NTLOADKEYEX oldNtLoadKeyEx;
NTLOCKPRODUCTACTIVATIONKEYS oldNtLockProductActivationKeys;
NTLOCKREGISTRYKEY oldNtLockRegistryKey;
NTMAKEPERMANENTOBJECT oldNtMakePermanentObject;
NTMAKETEMPORARYOBJECT oldNtMakeTemporaryObject;
NTMAPUSERPHYSICALPAGES oldNtMapUserPhysicalPages;
NTMAPUSERPHYSICALPAGESSCATTER oldNtMapUserPhysicalPagesScatter;
NTMODIFYBOOTENTRY oldNtModifyBootEntry;
NTMODIFYDRIVERENTRY oldNtModifyDriverEntry;
NTNOTIFYCHANGEDIRECTORYFILE oldNtNotifyChangeDirectoryFile;
NTNOTIFYCHANGESESSION oldNtNotifyChangeSession;
NTOPENENLISTMENT oldNtOpenEnlistment;
NTOPENEVENTPAIR oldNtOpenEventPair;
NTOPENIOCOMPLETION oldNtOpenIoCompletion;
NTOPENJOBOBJECT oldNtOpenJobObject;
NTOPENKEYEDEVENT oldNtOpenKeyedEvent;
NTOPENOBJECTAUDITALARM oldNtOpenObjectAuditAlarm;
NTOPENPRIVATENAMESPACE oldNtOpenPrivateNamespace;
NTOPENPROCESSTOKEN oldNtOpenProcessToken;
NTOPENRESOURCEMANAGER oldNtOpenResourceManager;
NTOPENSEMAPHORE oldNtOpenSemaphore;
NTOPENSESSION oldNtOpenSession;
NTOPENTHREADTOKEN oldNtOpenThreadToken;
NTOPENTIMER oldNtOpenTimer;
NTOPENTRANSACTION oldNtOpenTransaction;
NTOPENTRANSACTIONMANAGER oldNtOpenTransactionManager;
NTPLUGPLAYCONTROL oldNtPlugPlayControl;
NTPREPREPARECOMPLETE oldNtPrePrepareComplete;
NTPREPREPAREENLISTMENT oldNtPrePrepareEnlistment;
NTPREPARECOMPLETE oldNtPrepareComplete;
NTPREPAREENLISTMENT oldNtPrepareEnlistment;
NTPRIVILEGECHECK oldNtPrivilegeCheck;
NTPRIVILEGEOBJECTAUDITALARM oldNtPrivilegeObjectAuditAlarm;
NTPRIVILEGEDSERVICEAUDITALARM oldNtPrivilegedServiceAuditAlarm;
NTPROPAGATIONCOMPLETE oldNtPropagationComplete;
NTPROPAGATIONFAILED oldNtPropagationFailed;
NTPULSEEVENT oldNtPulseEvent;
NTQUERYBOOTENTRYORDER oldNtQueryBootEntryOrder;
NTQUERYBOOTOPTIONS oldNtQueryBootOptions;
NTQUERYDEBUGFILTERSTATE oldNtQueryDebugFilterState;
NTQUERYDEFAULTLOCALE oldNtQueryDefaultLocale;
NTQUERYDEFAULTUILANGUAGE oldNtQueryDefaultUILanguage;
NTQUERYDIRECTORYOBJECT oldNtQueryDirectoryObject;
NTQUERYDIRECTORYOBJECT oldNtQueryDirectoryObject;
NTQUERYDRIVERENTRYORDER oldNtQueryDriverEntryOrder;
NTQUERYINFORMATIONFILE oldNtQueryInformationFile;
NTQUERYINFORMATIONENLISTMENT oldNtQueryInformationEnlistment;
NTQUERYINFORMATIONJOBOBJECT oldNtQueryInformationJobObject;
NTQUERYINFORMATIONRESOURCEMANAGER oldNtQueryInformationResourceManager;
NTQUERYINFORMATIONTRANSACTION oldNtQueryInformationTransaction;
NTQUERYINFORMATIONTRANSACTIONMANAGER oldNtQueryInformationTransactionManager;
NTQUERYINFORMATIONWORKERFACTORY oldNtQueryInformationWorkerFactory;
NTQUERYINSTALLUILANGUAGE oldNtQueryInstallUILanguage;
NTQUERYINTERVALPROFILE oldNtQueryIntervalProfile;
NTQUERYIOCOMPLETION oldNtQueryIoCompletion;
NTQUERYOPENSUBKEYS oldNtQueryOpenSubKeys;
NTQUERYOPENSUBKEYSEX oldNtQueryOpenSubKeysEx;
NTQUERYINFORMATIONPROCESS oldNtQueryInformationProcess;
NTQUERYSECTION oldNtQuerySection;
NTQUERYSECURITYATTRIBUTESTOKEN oldNtQuerySecurityAttributesToken;
NTQUERYSEMAPHORE oldNtQuerySemaphore;
NTQUERYSYSTEMENVIRONMENTVALUE oldNtQuerySystemEnvironmentValue;
NTQUERYSYSTEMENVIRONMENTVALUEEX oldNtQuerySystemEnvironmentValueEx;
NTQUERYSYSTEMINFORMATIONEX oldNtQuerySystemInformationEx;
NTQUERYTIMER oldNtQueryTimer;
NTRAISEEXCEPTION oldNtRaiseException;
NTRAISEHARDERROR oldNtRaiseHardError;
NTREADFILESCATTER oldNtReadFileScatter;
NTREADONLYENLISTMENT oldNtReadOnlyEnlistment;
NTRECOVERENLISTMENT oldNtRecoverEnlistment;
NTRECOVERRESOURCEMANAGER oldNtRecoverResourceManager;
NTRECOVERTRANSACTIONMANAGER oldNtRecoverTransactionManager;
NTREGISTERPROTOCOLADDRESSINFORMATION oldNtRegisterProtocolAddressInformation;
NTRELEASEKEYEDEVENT oldNtReleaseKeyedEvent;
NTRELEASESEMAPHORE oldNtReleaseSemaphore;
NTREMOVEIOCOMPLETION oldNtRemoveIoCompletion;
NTREMOVEPROCESSDEBUG oldNtRemoveProcessDebug;
NTRENAMETRANSACTIONMANAGER oldNtRenameTransactionManager;
NTREPLACEKEY oldNtReplaceKey;
NTREPLACEPARTITIONUNIT oldNtReplacePartitionUnit;
NTREPLYWAITRECEIVEPORTEX oldNtReplyWaitReceivePortEx;
NTRESETEVENT oldNtResetEvent;
NTRESETWRITEWATCH oldNtResetWriteWatch;
NTRESTOREKEY oldNtRestoreKey;
NTRESUMEPROCESS oldNtResumeProcess;
NTROLLBACKCOMPLETE oldNtRollbackComplete;
NTROLLBACKENLISTMENT oldNtRollbackEnlistment;
NTROLLBACKTRANSACTION oldNtRollbackTransaction;
NTROLLFORWARDTRANSACTIONMANAGER oldNtRollforwardTransactionManager;
NTSAVEKEY oldNtSaveKey;
NTSAVEKEYEX oldNtSaveKeyEx;
NTSAVEMERGEDKEYS oldNtSaveMergedKeys;
NTSECURECONNECTPORT oldNtSecureConnectPort;
NTSERIALIZEBOOT oldNtSerializeBoot;
NTSETBOOTENTRYORDER oldNtSetBootEntryOrder;
NTSETBOOTOPTIONS oldNtSetBootOptions;
NTSETDEBUGFILTERSTATE oldNtSetDebugFilterState;
NTSETDEFAULTHARDERRORPORT oldNtSetDefaultHardErrorPort;
NTSETDEFAULTLOCALE oldNtSetDefaultLocale;
NTSETDEFAULTUILANGUAGE oldNtSetDefaultUILanguage;
NTSETDRIVERENTRYORDER oldNtSetDriverEntryOrder;
NTSETEVENTBOOSTPRIORITY oldNtSetEventBoostPriority;
NTSETHIGHEVENTPAIR oldNtSetHighEventPair;
NTSETHIGHWAITLOWEVENTPAIR oldNtSetHighWaitLowEventPair;
NTSETINFORMATIONDEBUGOBJECT oldNtSetInformationDebugObject;
NTSETINFORMATIONENLISTMENT oldNtSetInformationEnlistment;
NTSETINFORMATIONJOBOBJECT oldNtSetInformationJobObject;
NTSETINFORMATIONOBJECT oldNtSetInformationObject;
NTSETINFORMATIONRESOURCEMANAGER oldNtSetInformationResourceManager;
NTSETINFORMATIONTRANSACTION oldNtSetInformationTransaction;
NTSETINFORMATIONTRANSACTIONMANAGER oldNtSetInformationTransactionManager;
NTSETINFORMATIONWORKERFACTORY oldNtSetInformationWorkerFactory;
NTSETINTERVALPROFILE oldNtSetIntervalProfile;
NTSETIOCOMPLETION oldNtSetIoCompletion;
NTSETLDTENTRIES oldNtSetLdtEntries;
NTSETLOWEVENTPAIR oldNtSetLowEventPair;
NTSETLOWWAITHIGHEVENTPAIR oldNtSetLowWaitHighEventPair;
NTSETSYSTEMENVIRONMENTVALUE oldNtSetSystemEnvironmentValue;
NTSETSYSTEMENVIRONMENTVALUEEX oldNtSetSystemEnvironmentValueEx;
NTSETSYSTEMINFORMATION oldNtSetSystemInformation;
NTSETSYSTEMPOWERSTATE oldNtSetSystemPowerState;
NTSETTHREADEXECUTIONSTATE oldNtSetThreadExecutionState;
NTSETTIMER oldNtSetTimer;
NTSETUUIDSEED oldNtSetUuidSeed;
NTSHUTDOWNSYSTEM oldNtShutdownSystem;
NTSHUTDOWNWORKERFACTORY oldNtShutdownWorkerFactory;
NTSIGNALANDWAITFORSINGLEOBJECT oldNtSignalAndWaitForSingleObject;
NTSINGLEPHASEREJECT oldNtSinglePhaseReject;
NTSTARTPROFILE oldNtStartProfile;
NTSTOPPROFILE oldNtStopProfile;
NTSUSPENDPROCESS oldNtSuspendProcess;
NTTERMINATEJOBOBJECT oldNtTerminateJobObject;
NTTESTALERT oldNtTestAlert;
NTTHAWREGISTRY oldNtThawRegistry;
NTTHAWTRANSACTIONS oldNtThawTransactions;
NTTRACECONTROL oldNtTraceControl;
NTTRACEEVENT oldNtTraceEvent;
NTTRANSLATEFILEPATH oldNtTranslateFilePath;
NTUMSTHREADYIELD oldNtUmsThreadYield;
NTUNLOADKEY oldNtUnloadKey;
NTUNLOADKEY2 oldNtUnloadKey2;
NTUNLOADKEYEX oldNtUnloadKeyEx;
NTVDMCONTROL oldNtVdmControl;
NTWAITFORDEBUGEVENT oldNtWaitForDebugEvent;
NTWAITFORKEYEDEVENT oldNtWaitForKeyedEvent;
NTWAITFORMULTIPLEOBJECTS oldNtWaitForMultipleObjects;
NTWAITFORMULTIPLEOBJECTS32 oldNtWaitForMultipleObjects32;
NTSETLOWWAITHIGHEVENTPAIR oldNtSetLowWaitHighEventPair;
NTWAITLOWEVENTPAIR oldNtWaitLowEventPair;
NTWORKERFACTORYWORKERREADY oldNtWorkerFactoryWorkerReady;
NTWRITEFILEGATHER oldNtWriteFileGather;
NTYIELDEXECUTION oldNtYieldExecution;

typedef USHORT RTL_ATOM, PRTL_ATOM;
#define BOOT_DISK_ID_SIZE 16
#define BOOT_PARTITION_ID_SIZE 16
typedef struct _BOOT_ENTRY {
  ULONG Id;
  UCHAR DiskId[BOOT_DISK_ID_SIZE];
  UCHAR PartitionId[BOOT_PARTITION_ID_SIZE];
  PCSTR Name;
  PCSTR LoaderArguments;
  PCSTR KernelArguments;
  PCSTR LoaderPath;
  PCSTR KernelPath;
  PCSTR SystemPath;
  ULONGLONG Flags;
  ULONG DebugDevice;
}BOOT_ENTRY, *PBOOT_ENTRY;
typedef struct _EFI_DRIVER_ENTRY
{
  ULONG Version;
  ULONG Length;
  ULONG Id;
  ULONG Attributes;
  ULONG FriendlyNameOffset;
  ULONG DriverFilePathOffset;
} EFI_DRIVER_ENTRY, *PEFI_DRIVER_ENTRY;
//typedef struct _ALPC_CONTEXT_ATTR *PALPC_CONTEXT_ATTR;
//typedef struct _ALPC_PORT_ATTRIBUTES *PALPC_PORT_ATTRIBUTES;
//typedef HANDLE *PALPC_HANDLE;
//typedef struct _PORT_MESSAGE PORT_MESSAGE;
//typedef struct _PORT_MESSAGE * PPORT_MESSAGE;
//typedef struct _PORT_DATA_ENTRY PORT_DATA_ENTRY;
//typedef struct _PORT_DATA_ENTRY * PPORT_DATA_ENTRY;
//typedef struct _PORT_DATA_INFORMATION PORT_DATA_INFORMATION;
//typedef struct _PORT_DATA_INFORMATION * PPORT_DATA_INFORMATION;
//typedef struct _LPC_CLIENT_DIED_MSG LPC_CLIENT_DIED_MSG; 
//typedef struct _LPC_CLIENT_DIED_MSG * PLPC_CLIENT_DIED_MSG;
//typedef struct _PORT_VIEW PORT_VIEW;
//typedef struct _PORT_VIEW * PPORT_VIEW;
//typedef struct _REMOTE_PORT_VIEW REMOTE_PORT_VIEW;
//typedef struct _REMOTE_PORT_VIEW * PREMOTE_PORT_VIEW;
//typedef struct _PORT_MESSAGE64 PORT_MESSAGE64; 
//typedef struct _PORT_MESSAGE64 * PPORT_MESSAGE64; 
//typedef struct _LPC_CLIENT_DIED_MSG64 LPC_CLIENT_DIED_MSG64;
//typedef struct _LPC_CLIENT_DIED_MSG64 * PLPC_CLIENT_DIED_MSG64;
//typedef struct _PORT_VIEW64 PORT_VIEW64;
//typedef struct _PORT_VIEW64 * PPORT_VIEW64;
//typedef struct _REMOTE_PORT_VIEW64 REMOTE_PORT_VIEW64;
//typedef struct _REMOTE_PORT_VIEW64 * PREMOTE_PORT_VIEW64;
//typedef enum _PORT_INFORMATION_CLASS PORT_INFORMATION_CLASS;
//typedef HANDLE ALPC_HANDLE;
//typedef HANDLE * PALPC_HANDLE;
//typedef struct _ALPC_PORT_ATTRIBUTES ALPC_PORT_ATTRIBUTES; 
//typedef struct _ALPC_PORT_ATTRIBUTES * PALPC_PORT_ATTRIBUTES;
//typedef struct _ALPC_MESSAGE_ATTRIBUTES ALPC_MESSAGE_ATTRIBUTES;
//typedef struct _ALPC_MESSAGE_ATTRIBUTES * PALPC_MESSAGE_ATTRIBUTES;
//typedef struct _ALPC_COMPLETION_LIST_STATE ALPC_COMPLETION_LIST_STATE;
//typedef struct _ALPC_COMPLETION_LIST_STATE * PALPC_COMPLETION_LIST_STATE;
//typedef struct _ALPC_CONTEXT_ATTR ALPC_CONTEXT_ATTR;
//typedef struct _ALPC_CONTEXT_ATTR * PALPC_CONTEXT_ATTR;
//typedef struct _ALPC_HANDLE_ATTR ALPC_HANDLE_ATTR;
//typedef struct _ALPC_HANDLE_ATTR * PALPC_HANDLE_ATTR;
//typedef struct _ALPC_SECURITY_ATTR ALPC_SECURITY_ATTR;
//typedef struct _ALPC_SECURITY_ATTR * PALPC_SECURITY_ATTR;
//typedef struct _ALPC_DATA_VIEW_ATTR ALPC_DATA_VIEW_ATTR;
//typedef struct _ALPC_DATA_VIEW_ATTR * PALPC_DATA_VIEW_ATTR;
//typedef enum _ALPC_PORT_INFORMATION_CLASS ALPC_PORT_INFORMATION_CLASS;
//typedef struct _ALPC_BASIC_INFORMATION ALPC_BASIC_INFORMATION;
//typedef struct _ALPC_BASIC_INFORMATION * PALPC_BASIC_INFORMATION;
//typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
//typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT * PALPC_PORT_ASSOCIATE_COMPLETION_PORT;
//typedef struct _ALPC_SERVER_INFORMATION ALPC_SERVER_INFORMATION;
//typedef struct _ALPC_SERVER_INFORMATION * PALPC_SERVER_INFORMATION;
//typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION ALPC_PORT_MESSAGE_ZONE_INFORMATION;
//typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION * PALPC_PORT_MESSAGE_ZONE_INFORMATION;
//typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION ALPC_PORT_COMPLETION_LIST_INFORMATION;
//typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION * PALPC_PORT_COMPLETION_LIST_INFORMATION;
//typedef enum _ALPC_MESSAGE_INFORMATION_CLASS ALPC_MESSAGE_INFORMATION_CLASS; 
//typedef enum _ALPC_MESSAGE_INFORMATION_CLASS * PALPC_MESSAGE_INFORMATION_CLASS;
//typedef ULONG APPHELPCACHESERVICECLASS;
typedef struct _APPHELP_CACHE_SERVICE_LOOKUP
{
  UNICODE_STRING ImageName;
  HANDLE ImageHandle;
} APPHELP_CACHE_SERVICE_LOOKUP, *PAPPHELP_CACHE_SERVICE_LOOKUP;
typedef struct _JOB_SET_ARRAY {
  HANDLE JobHandle;  // Handle to job object to insert
  DWORD MemberLevel; // Level of this job in the set. Must be > 0. Can be sparse.
  DWORD Flags;    // Unused. Must be zero
}PJOB_SET_ARRAY, *PJOB_SET_ARRAY;


enum _PORT_INFORMATION_CLASS { PortBasicInformation, PortDumpInformation };
enum _ALPC_PORT_INFORMATION_CLASS { 
 AlpcBasicInformation, AlpcPortInformation, AlpcAssociateCompletionPortInformation, AlpcConnectedSIDInformation, 
 AlpcServerInformation, AlpcMessageZoneInformation, AlpcRegisterCompletionListInformation, AlpcUnregisterCompletionListInformation, 
 AlpcAdjustCompletionListConcurrencyCountInformation, AlpcRegisterCallbackInformation, AlpcCompletionListRundownInformation, AlpcWaitForPortReferences, 
 MaxAlpcPortInfoClass 
};
enum _ALPC_MESSAGE_INFORMATION_CLASS { AlpcMessageSidInformation, AlpcMessageTokenModifiedIdInformation, MaxAlpcMessageInfoClass};
 
typedef struct _ALPC_BASIC_INFORMATION ALPC_BASIC_INFORMATION;
typedef struct _ALPC_COMPLETION_LIST_STATE ALPC_COMPLETION_LIST_STATE;
typedef struct _ALPC_CONTEXT_ATTR ALPC_CONTEXT_ATTR;
typedef struct _ALPC_DATA_VIEW_ATTR ALPC_DATA_VIEW_ATTR;
typedef HANDLE ALPC_HANDLE;
typedef struct _ALPC_HANDLE_ATTR ALPC_HANDLE_ATTR;
typedef struct _ALPC_MESSAGE_ATTRIBUTES ALPC_MESSAGE_ATTRIBUTES;
typedef enum _ALPC_MESSAGE_INFORMATION_CLASS ALPC_MESSAGE_INFORMATION_CLASS;
typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
typedef struct _ALPC_PORT_ATTRIBUTES ALPC_PORT_ATTRIBUTES;
typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION ALPC_PORT_COMPLETION_LIST_INFORMATION;
typedef enum _ALPC_PORT_INFORMATION_CLASS ALPC_PORT_INFORMATION_CLASS;
typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION ALPC_PORT_MESSAGE_ZONE_INFORMATION;
typedef struct _ALPC_SECURITY_ATTR ALPC_SECURITY_ATTR;
typedef struct _ALPC_SERVER_INFORMATION ALPC_SERVER_INFORMATION;
typedef struct _LPC_CLIENT_DIED_MSG LPC_CLIENT_DIED_MSG;
typedef struct _LPC_CLIENT_DIED_MSG64 LPC_CLIENT_DIED_MSG64;
typedef struct _ALPC_BASIC_INFORMATION * PALPC_BASIC_INFORMATION;
typedef struct _ALPC_COMPLETION_LIST_STATE * PALPC_COMPLETION_LIST_STATE;
typedef struct _ALPC_CONTEXT_ATTR * PALPC_CONTEXT_ATTR;
typedef struct _ALPC_DATA_VIEW_ATTR * PALPC_DATA_VIEW_ATTR;
typedef HANDLE *PALPC_HANDLE;
typedef struct _ALPC_HANDLE_ATTR * PALPC_HANDLE_ATTR;
typedef struct _ALPC_MESSAGE_ATTRIBUTES * PALPC_MESSAGE_ATTRIBUTES;
typedef enum _ALPC_MESSAGE_INFORMATION_CLASS * PALPC_MESSAGE_INFORMATION_CLASS;
typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT * PALPC_PORT_ASSOCIATE_COMPLETION_PORT;
typedef struct _ALPC_PORT_ATTRIBUTES * PALPC_PORT_ATTRIBUTES;
typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION * PALPC_PORT_COMPLETION_LIST_INFORMATION;
typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION * PALPC_PORT_MESSAGE_ZONE_INFORMATION;
typedef struct _ALPC_SECURITY_ATTR * PALPC_SECURITY_ATTR;
typedef struct _ALPC_SERVER_INFORMATION * PALPC_SERVER_INFORMATION;
typedef struct _LPC_CLIENT_DIED_MSG * PLPC_CLIENT_DIED_MSG;
typedef struct _LPC_CLIENT_DIED_MSG64 * PLPC_CLIENT_DIED_MSG64;
typedef struct _PORT_DATA_ENTRY PORT_DATA_ENTRY;
typedef struct _PORT_DATA_INFORMATION PORT_DATA_INFORMATION;
typedef enum _PORT_INFORMATION_CLASS PORT_INFORMATION_CLASS;
typedef struct _PORT_MESSAGE PORT_MESSAGE;
typedef struct _PORT_MESSAGE64 PORT_MESSAGE64;
typedef struct _PORT_VIEW PORT_VIEW;
typedef struct _PORT_VIEW64 PORT_VIEW64;
typedef struct _PORT_DATA_ENTRY * PPORT_DATA_ENTRY;
typedef struct _PORT_DATA_INFORMATION * PPORT_DATA_INFORMATION;
typedef struct _PORT_MESSAGE * PPORT_MESSAGE;
typedef struct _PORT_MESSAGE64 * PPORT_MESSAGE64;
typedef struct _PORT_VIEW * PPORT_VIEW;
typedef struct _PORT_VIEW64 * PPORT_VIEW64;
typedef struct _REMOTE_PORT_VIEW * PREMOTE_PORT_VIEW;
typedef struct _REMOTE_PORT_VIEW64 * PREMOTE_PORT_VIEW64;
typedef struct _REMOTE_PORT_VIEW REMOTE_PORT_VIEW;
typedef struct _REMOTE_PORT_VIEW64 REMOTE_PORT_VIEW64;

NTSTATUS newNtAccessCheck(PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG ReturnLength, PULONG GrantedAccess, NTSTATUS* AccessStatus);
NTSTATUS newNtAccessCheckAndAuditAlarm(PUNICODE_STRING SubsystemName OPTIONAL, HANDLE ObjectHandle OPTIONAL, PUNICODE_STRING ObjectTypeName OPTIONAL, PUNICODE_STRING ObjectName OPTIONAL, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PULONG GrantedAccess, PULONG AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS newNtAccessCheckByType(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, (ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, *PrivilegeSetLength PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus); 
NTSTATUS newNtAccessCheckByTypeAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, (ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS newNtAccessCheckByTypeResultList(PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, (ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, *PrivilegeSetLength PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, (ObjectTypeListLength) PACCESS_MASK GrantedAccess, (ObjectTypeListLength) PNTSTATUS AccessStatus);
NTSTATUS newNtAccessCheckByTypeResultListAndAuditAlarm(PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, (ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, (ObjectTypeListLength) PACCESS_MASK GrantedAccess, (ObjectTypeListLength) PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS newNtAccessCheckByTypeResultListAndAuditAlarmByHandle(PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, (ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, (ObjectTypeListLength) PACCESS_MASK GrantedAccess, (ObjectTypeListLength) PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);
NTSTATUS newNtAddAtom(PWCHAR AtomName, PRTL_ATOM Atom);
NTSTATUS newNtAddBootEntry(PBOOT_ENTRY Entry, ULONG Id);
NTSTATUS newNtAddDriverEntry(PEFI_DRIVER_ENTRY BootEntry, ULONG Id);
NTSTATUS newNtAdjustGroupsToken(HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, (BufferLength, *ReturnLength) PTOKEN_GROUPS PreviousState, PULONG ReturnLength);
NTSTATUS newNtAdjustPrivilegesToken(HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, (BufferLength, *ReturnLength) PTOKEN_PRIVILEGES PreviousState, _When_(PreviousState != NULL, ) PULONG ReturnLength);
NTSTATUS newNtAllocateReserveObject(PHANDLE hObject, POBJECT_ATTRIBUTES ObjectAttributes, DWORD ObjectType);
NTSTATUS newNtAllocateUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
NTSTATUS newNtAllocateUuids(PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PUCHAR Seed);
NTSTATUS newNtAlpcAcceptConnectPort(PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, (ConnectionRequest->u1.s1.TotalLength) PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);
NTSTATUS newNtAlpcCancelMessage(HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext); 
NTSTATUS newNtAlpcConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);
NTSTATUS newNtAlpcCreatePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);
NTSTATUS newNtAlpcCreatePortSection(HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);
NTSTATUS newNtAlpcCreateResourceReserve(HANDLE PortHandle, _Reserved_ ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);
NTSTATUS newNtAlpcCreateSectionView(HANDLE PortHandle, _Reserved_ ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes); 
NTSTATUS newNtAlpcCreateSecurityContext(HANDLE PortHandle, _Reserved_ ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);
NTSTATUS newNtAlpcDeletePortSection(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE SectionHandle);
NTSTATUS newNtAlpcDeleteResourceReserve(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ResourceId);
NTSTATUS newNtAlpcDeleteSectionView(HANDLE PortHandle, _Reserved_ ULONG Flags, PVOID ViewBase); 
NTSTATUS newNtAlpcDeleteSecurityContext(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ContextHandle); 
NTSTATUS newNtAlpcDisconnectPort(HANDLE PortHandle, ULONG Flags); 
NTSTATUS newNtAlpcImpersonateClientOfPort(HANDLE PortHandle, PPORT_MESSAGE Message, PVOID Flags);
NTSTATUS newNtAlpcOpenSenderProcess(PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtAlpcOpenSenderThread(PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtAlpcQueryInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, _Inout_updates_bytes_to_(Length,*ReturnLength) PVOID PortInformation, ULONG Length, PULONG ReturnLength);
NTSTATUS newNtAlpcQueryInformationMessage(HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, (Length,*ReturnLength) PVOID MessageInformation, ULONG Length, opt_ PULONG ReturnLength);
NTSTATUS newNtAlpcRevokeSecurityContext(HANDLE PortHandle, _Reserved_ ULONG Flags, ALPC_HANDLE ContextHandle); 
NTSTATUS newNtAlpcSendWaitReceivePort(HANDLE PortHandle, ULONG Flags,PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, *,*BufferLength PPORT_MESSAGE ReceiveMessage, PSIZE_T BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);
NTSTATUS newNtAlpcSetInformation(HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);
NTSTATUS newNtApphelpCacheControl(APPHELPCACHESERVICECLASS Service, PAPPHELP_CACHE_SERVICE_LOOKUP ServiceData);
NTSTATUS newNtAreMappedFilesTheSame(PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);
NTSTATUS newNtAssignProcessToJobObject(HANDLE JobHandle, HANDLE ProcessHandle);
NTSTATUS newNtCancelIoFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS newNtCancelIoFileEx(HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock); 
NTSTATUS newNtCancelSynchronousIoFile(HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);
NTSTATUS newNtCancelTimer(HANDLE TimerHandle, PBOOLEAN CurrentState OPTIONAL);
NTSTATUS newNtClearEvent(HANDLE EventHandle);
NTSTATUS newNtCommitComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtCommitEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock); 
NTSTATUS newNtCommitTransaction(HANDLE TransactionHandle, BOOLEAN Wait); 
NTSTATUS newNtCompactKeys(ULONG NrOfKeys, HANDLE KeysArray[]);
NTSTATUS newNtCompareTokens(HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);
NTSTATUS newNtCompressKey(HANDLE Key);
NTSTATUS newNtCreateDebugObject(PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
NTSTATUS newNtCreateEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);
NTSTATUS newNtCreateEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL);
NTSTATUS newNtCreateIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, ULONG NumberOfConcurrentThreads);
NTSTATUS newNtCreateJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtCreateJobSet(ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);
NTSTATUS newNtCreateKeyedEvent(PHANDLE OutHandle, ACCESS_MASK AccessMask, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);
NTSTATUS newNtCreateMailslotFile(PHANDLE pHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES attr, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaxMessageSize, PLARGE_INTEGER TimeOut);
NTSTATUS newNtCreateNamedPipeFile(PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);
NTSTATUS newNtCreatePagingFile(PUNICODE_STRING FileName, PLARGE_INTEGER InitialSize, PLARGE_INTEGER MaximumSize, ULONG Reserved);
NTSTATUS newNtCreatePrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
NTSTATUS newNtCreateProfile(PHANDLE ProfileHandle, HANDLE Process OPTIONAL, PVOID ImageBase, ULONG ImageSize, ULONG BucketSize, PVOID Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);
NTSTATUS newNtCreateProfileEx(PHANDLE ProfileHandle, HANDLE ProcessHandle, PVOID ImageBase, SIZE_T ImageSize, ULONG Granularity, PVOID Buffer, ULONG ProfilingSize, KPROFILE_SOURCE Source, USHORT GroupCount, (GroupCount) PGROUP_AFFINITY Affinity);
NTSTATUS newNtCreateResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);
NTSTATUS newNtCreateSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, LONG InitialCount, LONG MaximumCount);
NTSTATUS newNtCreateSymbolicLinkObject(PHANDLE SymbolicLinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES attr, PUNICODE_STRING TargetName);
NTSTATUS newNtCreateTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, TIMER_TYPE TimerType);
NTSTATUS newNtCreateToken(PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER TokenUser, PTOKEN_GROUPS TokenGroups, PTOKEN_PRIVILEGES TokenPrivileges, PTOKEN_OWNER TokenOwner, PTOKEN_PRIMARY_GROUP TokenPrimaryGroup, PTOKEN_DEFAULT_DACL TokenDefaultDacl, PTOKEN_SOURCE TokenSource);
NTSTATUS newNtCreateTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description); 
NTSTATUS newNtCreateTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength); 
NTSTATUS newNtCreateWaitablePort(PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage); 
NTSTATUS newNtCreateWorkerFactory(PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);
NTSTATUS newNtDebugContinue(HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS nt);
NTSTATUS newNtDeleteAtom(RTL_ATOM Atom);
NTSTATUS newNtDeleteBootEntry(ULONG Id);
NTSTATUS newNtDeleteDriverEntry(ULONG Id);
NTSTATUS newNtDeleteObjectAuditAlarm(PUNICODE_STRING SubsystemName, HANDLE ObjectHandle OPTIONAL, BOOLEAN GenerateOnClose);
NTSTATUS newNtDeletePrivateNamespace(HANDLE NamespaceHandle);
NTSTATUS newNtDisableLastKnownGood(VOID);
NTSTATUS newNtDisplayString(PUNICODE_STRING String);
NTSTATUS newNtDrawText(PUNICODE_STRING Text);
NTSTATUS newNtEnableLastKnownGood(VOID);
NTSTATUS newNtEnumerateBootEntries(PVOID Buffer, PULONG BufferLength);
NTSTATUS newNtEnumerateDriverEntries(PVOID Buffer, PULONG BufferLength);
NTSTATUS newNtEnumerateSystemEnvironmentValuesEx(ULONG InformationClass, PVOID Buffer, PULONG BufferLength);
NTSTATUS newNtEnumerateTransactionObject(HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);
NTSTATUS newNtExtendSection(HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);
NTSTATUS newNtFilterToken(HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);
NTSTATUS newNtFindAtom(PWCHAR AtomName, PRTL_ATOM Atom OPTIONAL);
NTSTATUS newNtFlushWriteBuffer(VOID);
NTSTATUS newNtFreeUserPhysicalPages(HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
NTSTATUS newNtFreezeRegistry(ULONG TimeOutInSeconds);
NTSTATUS newNtFreezeTransactions(PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);
ULONG newNtGetCurrentProcessorNumber(void);
NTSTATUS newNtGetDevicePowerState(HANDLE Device, PDEVICE_POWER_STATE State);
NTSTATUS newNtGetNextProcess(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);
NTSTATUS newNtGetNextThread(HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);
NTSTATUS newNtGetNlsSectionPtr(ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);
NTSTATUS newNtGetNotificationResourceManager(HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);
NTSTATUS newNtGetPlugPlayEvent(ULONG Reserved1, ULONG Reserved2, PPLUGPLAY_EVENT_BLOCK Buffer, ULONG BufferSize);
NTSTATUS newNtGetWriteWatch(HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);
NTSTATUS newNtImpersonateAnonymousToken(HANDLE ThreadHandle);
NTSTATUS newNtInitializeNlsFiles(PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);
NTSTATUS newNtInitializeRegistry(USHORT Flag);
NTSTATUS newNtInitiatePowerAction(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags, BOOLEAN Asynchronous);
NTSTATUS newNtIsProcessInJob(HANDLE ProcessHandle, HANDLE JobHandle OPTIONAL);
BOOLEAN newNtIsSystemResumeAutomatic(VOID);
NTSTATUS newNtLoadKey(POBJECT_ATTRIBUTES DestinationKeyName, POBJECT_ATTRIBUTES HiveFileName);
NTSTATUS newNtLoadKey2(POBJECT_ATTRIBUTES KeyObjectAttributes, POBJECT_ATTRIBUTES FileObjectAttributes, ULONG Flags);
NTSTATUS newNtLoadKeyEx(POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey);
NTSTATUS newNtLockProductActivationKeys(PULONG pPrivateVer, PULONG pSafeMode);
NTSTATUS newNtLockRegistryKey(HANDLE KeyHandle);
NTSTATUS newNtMakePermanentObject(HANDLE ObjectHandle);
NTSTATUS newNtMakeTemporaryObject(HANDLE Handle);
NTSTATUS newNtMapUserPhysicalPages(PVOID VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
NTSTATUS newNtMapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);
NTSTATUS newNtModifyBootEntry(PBOOT_ENTRY BootEntry);
NTSTATUS newNtModifyDriverEntry(PEFI_DRIVER_ENTRY DriverEntry);
NTSTATUS newNtNotifyChangeDirectoryFile(HANDLE FileHandle, HANDLE EventHandle OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG BufferSize, ULONG CompletionFilter, BOOLEAN WatchTree);
NTSTATUS newNtNotifyChangeSession(HANDLE SessionHandle, ULONG ChangeSequenceNumber, PLARGE_INTEGER ChangeTimeStamp, IO_SESSION_EVENT Event, IO_SESSION_STATE NewState, IO_SESSION_STATE PreviousState, (PayloadSize) PVOID Payload, ULONG PayloadSize);
NTSTATUS newNtOpenEnlistment(PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE RmHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenEventPair(PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenIoCompletion(PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenJobObject(PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenKeyedEvent(PHANDLE OutHandle, ACCESS_MASK AccessMask, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenObjectAuditAlarm(PUNICODE_STRING SubsystemName OPTIONAL, PHANDLE ObjectHandle OPTIONAL, PUNICODE_STRING ObjectTypeName OPTIONAL, PUNICODE_STRING ObjectName OPTIONAL, PSECURITY_DESCRIPTOR SecurityDescriptor OPTIONAL, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges OPTIONAL, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose OPTIONAL);
NTSTATUS newNtOpenPrivateNamespace(PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);
NTSTATUS newNtOpenProcessToken(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle); 
NTSTATUS newNtOpenResourceManager(PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes); 
NTSTATUS newNtOpenSemaphore(PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenSession(PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes); 
NTSTATUS newNtOpenThreadToken(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);
NTSTATUS newNtOpenTimer(PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);
NTSTATUS newNtOpenTransaction(PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);
NTSTATUS newNtOpenTransactionManager(PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);
NTSTATUS newNtPlugPlayControl(PLUGPLAY_CONTROL_CLASS PlugPlayControlClass, PVOID Buffer, ULONG BufferLength);
NTSTATUS newNtPrePrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtPrePrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtPrepareComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtPrepareEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtPrivilegeCheck(HANDLE TokenHandle, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);
NTSTATUS newNtPrivilegeObjectAuditAlarm(PUNICODE_STRING SubsystemName OPTIONAL, HANDLE ObjectHandle OPTIONAL, HANDLE ClientToken, ULONG DesiredAccess, PPRIVILEGE_SET ClientPrivileges, BOOLEAN AccessGranted);
NTSTATUS newNtPrivilegedServiceAuditAlarm(PUNICODE_STRING SubsystemName OPTIONAL, PUNICODE_STRING ServiceName OPTIONAL, HANDLE ClientToken, PPRIVILEGE_SET ClientPrivileges, BOOLEAN AccessGranted);
NTSTATUS newNtPropagationComplete(HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);
NTSTATUS newNtPropagationFailed(HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);
NTSTATUS newNtPulseEvent(HANDLE EventHandle, PLONG PreviousState OPTIONAL);
NTSTATUS newNtQueryBootEntryOrder(PULONG Ids, PULONG Count);
NTSTATUS newNtQueryBootOptions(PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);
NTSTATUS newNtQueryDebugFilterState(ULONG ComponentId, ULONG Level);
NTSTATUS newNtQueryDefaultLocale(BOOLEAN UserProfile, PLCID DefaultLocaleId);
NTSTATUS newNtQueryDefaultUILanguage(LANGID* LanguageId);
NTSTATUS newNtQueryDirectoryObject(HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);
NTSTATUS newNtQueryDirectoryObject(HANDLE handle, PDIRECTORY_BASIC_INFORMATION buffer, ULONG size, BOOLEAN single_entry, BOOLEAN restart, PULONG context, PULONG ret_size);
NTSTATUS newNtQueryDriverEntryOrder(PULONG Ids, PULONG Count);
NTSTATUS newNtQueryInformationFile(HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);
NTSTATUS newNtQueryInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobInformationClass, PVOID JobInformation, ULONG JobInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInformationTransactionManager(HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, (WorkerFactoryInformationLength) PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryInstallUILanguage(LANGID* LanguageId);
NTSTATUS newNtQueryIntervalProfile(KPROFILE_SOURCE ProfileSource, PULONG Interval);
NTSTATUS newNtQueryIoCompletion(HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS InformationClass, PVOID IoCompletionInformation, ULONG InformationBufferLength, PULONG RequiredLength OPTIONAL);
NTSTATUS newNtQueryOpenSubKeys(POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);
NTSTATUS newNtQueryOpenSubKeysEx(POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, (BufferLength) PVOID Buffer, PULONG RequiredSize);
NTSTATUS newNtQueryInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);
NTSTATUS newNtQuerySection(HANDLE SectionHandle, SECTION_INFORMATION_CLASS InformationClass, PVOID InformationBuffer, ULONG InformationBufferSize, PULONG ResultLength OPTIONAL);
NTSTATUS newNtQuerySecurityAttributesToken(HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, (Length) PVOID Buffer, ULONG Length, PULONG ReturnLength); 
NTSTATUS newNtQuerySemaphore(HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength OPTIONAL);
NTSTATUS newNtQuerySystemEnvironmentValue(PUNICODE_STRING VariableName, PWCHAR Value, ULONG ValueBufferLength, PULONG RequiredLength);
NTSTATUS newNtQuerySystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ReturnLength, PULONG Attributes);
NTSTATUS newNtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID InputBuffer, ULONG InputBufferLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);
NTSTATUS newNtQueryTimer(HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG Length, PULONG ReturnLength);
NTSTATUS newNtRaiseException(PEXCEPTION_RECORD ExceptionRecord, PCONTEXT Context, BOOLEAN FirstChance);
NTSTATUS newNtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, PUNICODE_STRING UnicodeStringParameterMask OPTIONAL, PVOID *Parameters, HARDERROR_RESPONSE_OPTION ResponseOption, PHARDERROR_RESPONSE Response);
NTSTATUS newNtReadFileScatter(HANDLE FileHandle, HANDLE Event OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, FILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key OPTIONAL);
NTSTATUS newNtReadOnlyEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtRecoverEnlistment(HANDLE EnlistmentHandle, PVOID EnlistmentKey);
NTSTATUS newNtRecoverResourceManager(HANDLE ResourceManagerHandle);
NTSTATUS newNtRecoverTransactionManager(HANDLE TransactionManagerHandle);
NTSTATUS newNtRegisterProtocolAddressInformation(HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);
NTSTATUS newNtReleaseKeyedEvent(HANDLE Handle, PVOID Key, BOOLEAN Alertable, PLARGE_INTEGER Timeout);
NTSTATUS newNtReleaseSemaphore(HANDLE SemaphoreHandle, ULONG ReleaseCount, PULONG PreviousCount OPTIONAL);
NTSTATUS newNtRemoveIoCompletion(HANDLE IoCompletionHandle, PULONG CompletionKey, PULONG CompletionValue, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);
NTSTATUS newNtRemoveProcessDebug(HANDLE ProcessHandle, HANDLE DebugObjectHandle); 
NTSTATUS newNtRenameTransactionManager(PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);
NTSTATUS newNtReplaceKey(POBJECT_ATTRIBUTES NewHiveFileName, HANDLE KeyHandle, POBJECT_ATTRIBUTES BackupHiveFileName);
NTSTATUS newNtReplacePartitionUnit(PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);
NTSTATUS newNtReplyWaitReceivePortEx(HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);
NTSTATUS newNtResetEvent(HANDLE EventHandle, PLONG PreviousState OPTIONAL);
NTSTATUS newNtResetWriteWatch(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);
NTSTATUS newNtRestoreKey(HANDLE KeyHandle, HANDLE FileHandle, ULONG RestoreOption);
NTSTATUS newNtResumeProcess(HANDLE ProcessHandle);
NTSTATUS newNtRollbackComplete(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtRollbackEnlistment(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtRollbackTransaction(HANDLE TransactionHandle, BOOLEAN Wait);
NTSTATUS newNtRollforwardTransactionManager(HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtSaveKey(HANDLE KeyHandle, HANDLE FileHandle);
NTSTATUS newNtSaveKeyEx(HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags); 
NTSTATUS newNtSaveMergedKeys(HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);
NTSTATUS newNtSecureConnectPort(PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);
NTSTATUS newNtSerializeBoot(VOID);
NTSTATUS newNtSetBootEntryOrder(PULONG Ids, PULONG Count);
NTSTATUS newNtSetBootOptions(PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);
NTSTATUS newNtSetDebugFilterState(ULONG ComponentId, ULONG Level, BOOLEAN State);
NTSTATUS newNtSetDefaultHardErrorPort(HANDLE PortHandle);
NTSTATUS newNtSetDefaultLocale(BOOLEAN UserProfile, LCID DefaultLocaleId);
NTSTATUS newNtSetDefaultUILanguage(LANGID LanguageId);
NTSTATUS newNtSetDriverEntryOrder(PULONG Ids, PULONG Count);
NTSTATUS newNtSetEventBoostPriority(HANDLE EventHandle);
NTSTATUS newNtSetHighEventPair(HANDLE EventPairHandle);
NTSTATUS newNtSetHighWaitLowEventPair(HANDLE EventPairHandle);
NTSTATUS newNtSetInformationDebugObject(HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);
NTSTATUS newNtSetInformationEnlistment(HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);
NTSTATUS newNtSetInformationJobObject(HANDLE JobHandle, JOBOBJECTINFOCLASS JobInformationClass, PVOID JobInformation, ULONG JobInformationLength);
NTSTATUS newNtSetInformationObject(HANDLE ObjectHandle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG Length);
NTSTATUS newNtSetInformationResourceManager(HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);
NTSTATUS newNtSetInformationTransaction(HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);
NTSTATUS newNtSetInformationTransactionManager(HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength); 
NTSTATUS newNtSetInformationWorkerFactory(HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);
NTSTATUS newNtSetIntervalProfile(ULONG Interval, KPROFILE_SOURCE Source);
NTSTATUS newNtSetIoCompletion(HANDLE IoCompletionHandle, ULONG CompletionKey, PIO_STATUS_BLOCK IoStatusBlock, NTSTATUS CompletionStatus, ULONG NumberOfBytesTransfered);
NTSTATUS newNtSetLdtEntries(ULONG Selector1, LDT_ENTRY LdtEntry1, ULONG Selector2, LDT_ENTRY LdtEntry2);
NTSTATUS newNtSetLowEventPair(HANDLE EventPairHandle);
NTSTATUS newNtSetLowWaitHighEventPair(HANDLE EventPairHandle);
NTSTATUS newNtSetSystemEnvironmentValue(PUNICODE_STRING VariableName, PUNICODE_STRING Value);
NTSTATUS newNtSetSystemEnvironmentValueEx(PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ReturnLength, PULONG Attributes);
NTSTATUS newNtSetSystemInformation(SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);
NTSTATUS newNtSetSystemPowerState(POWER_ACTION SystemAction, SYSTEM_POWER_STATE LightestSystemState, ULONG Flags);
NTSTATUS newNtSetThreadExecutionState(EXECUTION_STATE NewFlags, EXECUTION_STATE *PreviousFlags);
NTSTATUS newNtSetTimer(HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine OPTIONAL, PVOID TimerContext OPTIONAL, BOOLEAN ResumeTimer, LONG Period OPTIONAL, PBOOLEAN PreviousState OPTIONAL);
NTSTATUS newNtSetUuidSeed(PUCHAR Seed);
NTSTATUS newNtShutdownSystem(SHUTDOWN_ACTION Action);
NTSTATUS newNtShutdownWorkerFactory(HANDLE WorkerFactoryHandle, volatile LONG *PendingWorkerCount);
NTSTATUS newNtSignalAndWaitForSingleObject(HANDLE ObjectToSignal, HANDLE WaitableObject, BOOLEAN Alertable, PLARGE_INTEGER Time OPTIONAL);
NTSTATUS newNtSinglePhaseReject(HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);
NTSTATUS newNtStartProfile(HANDLE ProfileHandle);
NTSTATUS newNtStopProfile(HANDLE ProfileHandle);
NTSTATUS newNtSuspendProcess(HANDLE ProcessHandle);
NTSTATUS newNtTerminateJobObject(HANDLE JobHandle, NTSTATUS ExitStatus);
NTSTATUS newNtTestAlert(VOID);
NTSTATUS newNtThawRegistry(VOID);
NTSTATUS newNtThawTransactions(VOID);
NTSTATUS newNtTraceControl(ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);
NTSTATUS newNtTraceEvent(HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);
NTSTATUS newNtTranslateFilePath(PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, ULONG OutputFilePathLength);
NTSTATUS newNtUmsThreadYield(PVOID SchedulerParam);
NTSTATUS newNtUnloadKey(POBJECT_ATTRIBUTES DestinationKeyName);
NTSTATUS newNtUnloadKey2(POBJECT_ATTRIBUTES TargetKey, ULONG Flags);
NTSTATUS newNtUnloadKeyEx(POBJECT_ATTRIBUTES TargetKey, HANDLE Event);
NTSTATUS newNtVdmControl(VDMSERVICECLASS Service, PVOID ServiceData);
NTSTATUS newNtWaitForDebugEvent(HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PVOID WaitStateChange);
NTSTATUS newNtWaitForKeyedEvent(HANDLE KeyedEvent, const void* NextEvent, BOOLEAN Recursive, const LARGE_INTEGER* TimeOut);
NTSTATUS newNtWaitForMultipleObjects(ULONG ObjectCount, PHANDLE HandleArray, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER TimeOut OPTIONAL);
NTSTATUS newNtWaitForMultipleObjects32(ULONG ObjectCount, PLONG Handles, WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER TimeOut OPTIONAL);
NTSTATUS newNtSetLowWaitHighEventPair(HANDLE EventPairHandle);
NTSTATUS newNtWaitLowEventPair(HANDLE EventPairHandle);
NTSTATUS newNtWorkerFactoryWorkerReady(HANDLE WorkerFactoryHandle);
NTSTATUS newNtWriteFileGather(HANDLE FileHandle, HANDLE Event OPTIONAL, PIO_APC_ROUTINE ApcRoutine OPTIONAL, PVOID ApcContext OPTIONAL, PIO_STATUS_BLOCK IoStatusBlock, FILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key OPTIONAL);
NTSTATUS newNtYieldExecution(VOID);

typedef enum _IO_COMPLETION_INFORMATION_CLASS
{
	IoCompletionBasicInformation
} IO_COMPLETION_INFORMATION_CLASS;

typedef enum _SECTION_INFORMATION_CLASS
{
	SectionBasicInformation,
	SectionImageInformation,
} SECTION_INFORMATION_CLASS;

typedef enum _SEMAPHORE_INFORMATION_CLASS {
  SemaphoreBasicInformation = 0x0,
} SEMAPHORE_INFORMATION_CLASS;

typedef enum _HARDERROR_RESPONSE { 
		ResponseReturnToCaller, 
		ResponseNotHandled, 
		ResponseAbort, 
		ResponseCancel, 
		ResponseIgnore, 
		ResponseNo, 
		ResponseOk, 
		ResponseRetry, 
		ResponseYes, 
		ResponseTryAgain, 
		ResponseContinue 
} HARDERROR_RESPONSE, *PHARDERROR_RESPONSE;

typedef enum _HARDERROR_RESPONSE_OPTION { 
		OptionAbortRetryIgnore, 
		OptionOk, 
		OptionOkCancel, 
		OptionRetryCancel, 
		OptionYesNo, 
		OptionYesNoCancel, 
		OptionShutdownSystem, 
		OptionExplorerTrayBaloon, 
		OptionCancelTryAgainContinue 
}HARDERROR_RESPONSE_OPTION, *PHARDERROR_RESPONSE_OPTION; 

typedef struct _DIRECTORY_BASIC_INFORMATION{
	UNICODE_STRING ObjectName;
	UNICODE_STRING ObjectTypeName;
	char Data[1];
}DIRECTORY_BASIC_INFORMATION, *PDIRECTORY_BASIC_INFORMATION;

typedef enum _TIMER_INFORMATION_CLASS {
  TimerBasicInformation = 0x0,
}TIMER_INFORMATION_CLASS;

typedef enum _VDMSERVICECLASS 	VDMSERVICECLASS;
typedef struct _FILE_PATH
{
  ULONG Version;
  ULONG Length;
  ULONG Type;
  CHAR FilePath[1];
} FILE_PATH, *PFILE_PATH;

typedef enum _WORKERFACTORYINFOCLASS
{
	WorkerFactoryTimeout,
	WorkerFactoryRetryTimeout,
	WorkerFactoryIdleTimeout,
	MaxWorkerFactoryInfoClass
} WORKERFACTORYINFOCLASS, *PWORKERFACTORYINFOCLASS;

typedef struct _BOOT_OPTIONS
{
  ULONG Version;
  ULONG Length;
  ULONG Timeout;
  ULONG CurrentBootEntryId;
  ULONG NextBootEntryId;
  WCHAR HeadlessRedirection[1];
} BOOT_OPTIONS, *PBOOT_OPTIONS;

typedef enum _SHUTDOWN_ACTION {
   ShutdownNoReboot,
   ShutdownReboot,
   ShutdownPowerOff
 } SHUTDOWN_ACTION;

typedef struct LDT_ENTRY
{
	ULONG LimitLow;
	ULONG BaseLow;
	LONG HighWord;
};

typedef enum _JOBOBJECTINFOCLASS {
	JobObjectBasicAccountingInformation = 1,
	JobObjectBasicLimitInformation,

	JobObjectAssociateCompletionPortInformation,
	JobObjectBasicAndIoAccountingInformation,
	JobObjectExtendedLimitInformation,
	MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent,
  TargetDeviceChangeEvent,
  DeviceClassChangeEvent,
  CustomDeviceEvent,
  DeviceInstallEvent,
  DeviceArrivalEvent,
  PowerEvent,
  VetoEvent,
  BlockedDriverEvent,
  InvalidIDEvent,
  MaxPlugEventCategory
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  GUID EventGuid;
  PLUGPLAY_EVENT_CATEGORY EventCategory;
  PULONG Result;
  ULONG Flags;
  ULONG TotalSize;
  PVOID DeviceObject;

  union
  {
    struct
    {
      GUID ClassGuid;
      WCHAR SymbolicLinkName[1];
    } DeviceClass;
    struct
    {
      WCHAR DeviceIds[1];
    } TargetDevice;
    struct
    {
      WCHAR DeviceId[1];
    } InstallDevice;
    struct
    {
      PVOID NotificationStructure;
      WCHAR DeviceIds[1];
    } CustomNotification;
    struct
    {
      PVOID Notification;
    } ProfileNotification;
    struct
    {
      ULONG NotificationCode;
      ULONG NotificationData;
    } PowerNotification;
    struct
    {
      PNP_VETO_TYPE VetoType;
      WCHAR DeviceIdVetoNameBuffer[1]; // DeviceId<null>VetoName<null><null>
    } VetoNotification;
    struct
    {
      GUID BlockedDriverGuid;
    } BlockedDriverNotification;
    struct
    {
      WCHAR ParentId[1];
    } InvalidIDNotification;
  } u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK;

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown, // unspecified
  PNP_VetoLegacyDevice, // instance path
  PNP_VetoPendingClose, // instance path
  PNP_VetoWindowsApp, // module
  PNP_VetoWindowsService, // service
  PNP_VetoOutstandingOpen, // instance path
  PNP_VetoDevice, // instance path
  PNP_VetoDriver, // driver service name
  PNP_VetoIllegalDeviceRequest, // instance path
  PNP_VetoInsufficientPower, // unspecified
  PNP_VetoNonDisableable, // instance path
  PNP_VetoLegacyDriver, // service
  PNP_VetoInsufficientRights // unspecified
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef enum _PLUGPLAY_CONTROL_CLASS
{
  PlugPlayControlEnumerateDevice,
  PlugPlayControlRegisterNewDevice,
  PlugPlayControlDeregisterDevice,
  PlugPlayControlInitializeDevice,
  PlugPlayControlStartDevice,
  PlugPlayControlUnlockDevice,
  PlugPlayControlQueryAndRemoveDevice,
  PlugPlayControlUserResponse,
  PlugPlayControlGenerateLegacyDevice,
  PlugPlayControlGetInterfaceDeviceList,
  PlugPlayControlProperty,
  PlugPlayControlDeviceClassAssociation,
  PlugPlayControlGetRelatedDevice,
  PlugPlayControlGetInterfaceDeviceAlias,
  PlugPlayControlDeviceStatus,
  PlugPlayControlGetDeviceDepth,
  PlugPlayControlQueryDeviceRelations,
  PlugPlayControlTargetDeviceRelation,
  PlugPlayControlQueryConflictList,
  PlugPlayControlRetrieveDock,
  PlugPlayControlResetDevice,
  PlugPlayControlHaltDevice,
  PlugPlayControlGetBlockedDriverList,
  MaxPlugPlayControl
} PLUGPLAY_CONTROL_CLASS, *PPLUGPLAY_CONTROL_CLASS;

typedef enum _DEBUGOBJECTINFOCLASS
{
  DebugObjectFlags = 1,
  MaxDebugObjectInfoClass
} DEBUGOBJECTINFOCLASS, *PDEBUGOBJECTINFOCLASS;

